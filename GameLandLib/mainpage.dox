/**
\mainpage 
GameEx is a library you can you use to develop a game if you want to use _SDL_.  It is not complete, but is already of some use.  If you want to use it in this current, incomplete state, I suggest you create a fork of the [GitHub repository](https://github.com/codespear/GameEx).



The following software is used by GameEx:
	- [Doxygen](http://www.stack.nl/~dimitri/doxygen/)
	- [Minimilist GNU for Windows](http://www.mingw.org/)
	- [OpenGL](http://www.opengl.org/)
	- [Simple Direct Media Layer](http://www.libsdl.org/)
	- [Template Unit Test Framework] (http://tut-framework.sourceforge.net/)
	- [SDL TTF](http://www.libsdl.org/projects/SDL_ttf/docs/index.html)
	- [SDL Image](http://www.libsdl.org/projects/SDL_image/)
	- [Base64 decoder](https://github.com/ReneNyffenegger/development_misc/tree/master/base64)
	- [TinyXML 2] (https://github.com/leethomason/tinyxml2)

\sa \ref using_gameobjects \ref using_collision_mgr 

\page using_gameobjects Using GameObjects

At the foundation of GameEx there is a class called game::GameObject.  Many of the features of GameEx requires you to use of implement subclasses of GameObject.  When starting out with a new game, it is not always clear where it will end up.  As a hobbyist you want to experiment, enjoy yourself, not design everything to the last detail.  But, how do you decide which concepts inherit from GameObject and which don't?  This is what this section is about. 

The first thing to understand is that the GameObject is your link to the main game loop.  This loop updates and draws. If you have something that changes over time or when the user interacts with it you want it to be updated via the game loop.   If something must be shown or can be heard, then you want it to be drawn via the game loop.  Generally, everything your write for your game is either drawn or updated.  

However, this does not mean all objects are instances of GameObject.  At the very minimum you need one instance of game::MainObject.  On the other extreme you can create a GameObject for every identifiable concept in your game.                  
 
One way to structure the code is to code a set of classes that captures the essence of the game - sometimes called the game model. These classes purposely excludes code that creates visuals and audio and also excludes code that handle user input.  Being a game, some of these classes must be aware of time - they typically have state that changes over time.  It is likely that these classes may have a move() or a tick() method that will be called from the game loop.  Some of these dynamic classes may also have a brief lifetime -- they exist for a short time and are then destroyed.  Other classes are less dynamic :- they may contain the details of a map, game rules or policies, and other game state information like the player's score and current level.  For some games the game model can be rather complex, and instances in this model could have a complex interaction with each other.      

It is the work of the GameObject classes to link the model to the games controllers and the views. Consider a very simple game like pong.  Maybe left-bat, the right-bat and the ball are the only dynamic objects, and each of these could be a game::GameObject instance.  But, you can also have one GameObject instance that moves these three objects and draws them.  This is up to you - the only rule is that you need at least one GameObject to have a working game.          

\sa \ref using_collision_mgr 

\page using_collision_mgr Using the collision manager
In your game, there is likely to be collisions. If you want to, you can use game::CollisionManagerWithBoxes for this. In order to use this collision manager, your game model must contain an instance of this manager.  Collectable objects (instances of game::CollidablePolygon) are added to it and removed from it. Keep in mind that the collision manager does not track the movements of objects within it.  It must be told that an object has moved.  

Typically you would add game::CollidablePolygon instances for the static geometry.  For example, if your play area is a square you need four border objects.  Static objects may overlap.  Now you'll add the dynamic elements.  As the game runs, the instance of game::CollisionManagerWithBoxes must be updated all the time.  For each object, the logic is as follows: remove it from the manger, change its location, then add it to the manager. The game::CollisionManager::check_and_add() will report a collision if there is one.  If there is a collision the object can take another action -- including removing itself from the manager.  

The thing to keep in mind is that the initiating object causes and notices the collision. Consider carefully which object in a collision pair will take action on collision.  For example, if a bullet his an enemy; is that collision handled when the enemy moves or when the bullet moves?  Or is there a separate collision resolver required? Also be aware of the sizes and the jump distances of your objects.  Are there scenarios where the collisions will not be noticed by the collision manager?       

Sound and visual effects can be implemented by using the game::CollisionListener that belongs to the game::CollisionManager. This could help to keep your code a bit leaner.

*/